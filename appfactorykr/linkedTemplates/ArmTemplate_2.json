{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "appfactorykr"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/df_DimProduct_SurrogateKey')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_appdb_product",
								"type": "DatasetReference"
							},
							"name": "sourceProduct"
						},
						{
							"dataset": {
								"referenceName": "ds_appdb_ProductModel",
								"type": "DatasetReference"
							},
							"name": "sourceProductModel"
						},
						{
							"dataset": {
								"referenceName": "ds_appdb_ProductCategory",
								"type": "DatasetReference"
							},
							"name": "sourceProductCategory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_synapse_DimProduct_SK",
								"type": "DatasetReference"
							},
							"name": "sinkDimProduct"
						}
					],
					"transformations": [
						{
							"name": "joinProductAndProductModel"
						},
						{
							"name": "joinProductAndProductCategory"
						},
						{
							"name": "select1"
						},
						{
							"name": "surrogateKeyProductSK"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceProduct",
						"source(output(",
						"          ProductModelID as integer,",
						"          Name as string,",
						"          CatalogDescription as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceProductModel",
						"source(output(",
						"          ProductCategoryID as integer,",
						"          ParentProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceProductCategory",
						"sourceProduct, sourceProductModel join(sourceProduct@ProductModelID == sourceProductModel@ProductModelID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinProductAndProductModel",
						"joinProductAndProductModel, sourceProductCategory join(sourceProduct@ProductCategoryID == sourceProductCategory@ProductCategoryID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinProductAndProductCategory",
						"joinProductAndProductCategory select(mapColumn(",
						"          ProductID,",
						"          ProductName = sourceProduct@Name,",
						"          ProductCategoryID = sourceProduct@ProductCategoryID,",
						"          ProductModelID = sourceProduct@ProductModelID,",
						"          ProductCategoryName = sourceProductCategory@Name,",
						"          ProductModelName = sourceProductModel@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 keyGenerate(output(ProductSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeyProductSK",
						"surrogateKeyProductSK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductSK as integer,",
						"          ProductID as integer,",
						"          ProductModelID as integer,",
						"          ProductcategoryID as integer,",
						"          ProductName as string,",
						"          ProductModelName as string,",
						"          ProductCategoryName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductSK,",
						"          ProductID,",
						"          ProductModelID,",
						"          ProductcategoryID = ProductCategoryID,",
						"          ProductName,",
						"          ProductModelName,",
						"          ProductCategoryName",
						"     )) ~> sinkDimProduct"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DimProduct_dedup_v1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_appdb_product",
								"type": "DatasetReference"
							},
							"name": "sourceProduct"
						},
						{
							"dataset": {
								"referenceName": "ds_appdb_ProductModel",
								"type": "DatasetReference"
							},
							"name": "sourceProductModel"
						},
						{
							"dataset": {
								"referenceName": "ds_appdb_ProductCategory",
								"type": "DatasetReference"
							},
							"name": "sourceProductCategory"
						},
						{
							"dataset": {
								"referenceName": "ds_synapse_DimProduct",
								"type": "DatasetReference"
							},
							"name": "LatestProducts"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_synapse_DimProduct",
								"type": "DatasetReference"
							},
							"name": "sinkDimProduct"
						}
					],
					"transformations": [
						{
							"name": "joinProductAndProductModel"
						},
						{
							"name": "joinProductAndProductCategory"
						},
						{
							"name": "IfProductNotexists"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceProduct",
						"source(output(",
						"          ProductModelID as integer,",
						"          Name as string,",
						"          CatalogDescription as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceProductModel",
						"source(output(",
						"          ProductCategoryID as integer,",
						"          ParentProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceProductCategory",
						"source(output(",
						"          ProductID as integer,",
						"          ProductModelID as integer,",
						"          ProductcategoryID as integer,",
						"          ProductName as string,",
						"          ProductModelName as string,",
						"          ProductCategoryName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> LatestProducts",
						"IfProductNotexists, sourceProductModel join(sourceProduct@ProductModelID == sourceProductModel@ProductModelID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinProductAndProductModel",
						"joinProductAndProductModel, sourceProductCategory join(sourceProduct@ProductCategoryID == sourceProductCategory@ProductCategoryID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinProductAndProductCategory",
						"sourceProduct, LatestProducts exists(sourceProduct@ProductID == LatestProducts@ProductID,",
						"     negate:true,",
						"     broadcast: 'auto')~> IfProductNotexists",
						"joinProductAndProductCategory sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductID as integer,",
						"          ProductModelID as integer,",
						"          ProductcategoryID as integer,",
						"          ProductName as string,",
						"          ProductModelName as string,",
						"          ProductCategoryName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductID,",
						"          ProductModelID = sourceProduct@ProductModelID,",
						"          ProductcategoryID = sourceProduct@ProductCategoryID,",
						"          ProductName = sourceProduct@Name,",
						"          ProductModelName = sourceProductModel@Name,",
						"          ProductCategoryName = sourceProductCategory@Name",
						"     )) ~> sinkDimProduct"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Factsales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_appdb_SalesOrderDetail",
								"type": "DatasetReference"
							},
							"name": "SourceSalesOrderDetail"
						},
						{
							"dataset": {
								"referenceName": "ds_appdb_SalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "sourceSalesOrderHeader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_synapse_dedicated_params",
								"type": "DatasetReference"
							},
							"name": "sinkFactSales"
						}
					],
					"transformations": [
						{
							"name": "SalesOrderDetailLFSalesOrderHeader"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          SalesOrderDetailID as integer,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(38,6),",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourceSalesOrderDetail",
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceSalesOrderHeader",
						"SourceSalesOrderDetail, sourceSalesOrderHeader join(SourceSalesOrderDetail@SalesOrderID == sourceSalesOrderHeader@SalesOrderID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SalesOrderDetailLFSalesOrderHeader",
						"SalesOrderDetailLFSalesOrderHeader sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductID as integer,",
						"          SalesOrderID as integer,",
						"          CustomerID as integer,",
						"          OrderQty as integer,",
						"          UnitPrice as decimal(19,4),",
						"          OrderDate as timestamp,",
						"          TaxAmt as decimal(19,4),",
						"          TotalAmount as decimal(19,4)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductID,",
						"          SalesOrderID = SourceSalesOrderDetail@SalesOrderID,",
						"          CustomerID,",
						"          OrderQty,",
						"          UnitPrice,",
						"          OrderDate,",
						"          TaxAmt",
						"     )) ~> sinkFactSales"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Factsales_drived_col')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_appdb_SalesOrderDetail",
								"type": "DatasetReference"
							},
							"name": "SourceSalesOrderDetail"
						},
						{
							"dataset": {
								"referenceName": "ds_appdb_SalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "sourceSalesOrderHeader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_synapse_dedicated_params",
								"type": "DatasetReference"
							},
							"name": "sinkFactSales"
						}
					],
					"transformations": [
						{
							"name": "SalesOrderDetailLFSalesOrderHeader"
						},
						{
							"name": "select1"
						},
						{
							"name": "DerivedColTotalAmount"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          SalesOrderDetailID as integer,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(38,6),",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourceSalesOrderDetail",
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceSalesOrderHeader",
						"SourceSalesOrderDetail, sourceSalesOrderHeader join(SourceSalesOrderDetail@SalesOrderID == sourceSalesOrderHeader@SalesOrderID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SalesOrderDetailLFSalesOrderHeader",
						"SalesOrderDetailLFSalesOrderHeader select(mapColumn(",
						"          SalesOrderID = SourceSalesOrderDetail@SalesOrderID,",
						"          ProductID,",
						"          UnitPrice,",
						"          OrderDate,",
						"          OrderQty,",
						"          CustomerID,",
						"          TaxAmt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(TotalAmount = multiply(OrderQty, UnitPrice)) ~> DerivedColTotalAmount",
						"DerivedColTotalAmount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductID as integer,",
						"          SalesOrderID as integer,",
						"          CustomerID as integer,",
						"          OrderQty as integer,",
						"          UnitPrice as decimal(19,4),",
						"          OrderDate as timestamp,",
						"          TaxAmt as decimal(19,4),",
						"          TotalAmount as decimal(19,4)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductID,",
						"          SalesOrderID,",
						"          CustomerID,",
						"          OrderQty,",
						"          UnitPrice,",
						"          OrderDate,",
						"          TaxAmt,",
						"          TotalAmount",
						"     )) ~> sinkFactSales"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_conditional_split')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_dl_gen2_parquet",
								"type": "DatasetReference"
							},
							"name": "sourceLogdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_synapse_logdata_parquet",
								"type": "DatasetReference"
							},
							"name": "sinkLogdata"
						}
					],
					"transformations": [
						{
							"name": "splitResourceGroup"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sourceLogdata",
						"sourceLogdata split({Resourcegroup} == 'app-grp',",
						"     disjoint: false) ~> splitResourceGroup@(appgrpstream, othergroups)",
						"splitResourceGroup@appgrpstream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkLogdata"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_json_array_process')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_dl_CustomerJson",
								"type": "DatasetReference"
							},
							"name": "sourceCustomerJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_synapse_Customercourse",
								"type": "DatasetReference"
							},
							"name": "sinkCustomerCourseTable"
						}
					],
					"transformations": [
						{
							"name": "flattenCourses"
						}
					],
					"scriptLines": [
						"source(output(",
						"          courses as string[],",
						"          customerid as short,",
						"          customername as string,",
						"          details as (city as string, mobile as string),",
						"          registered as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> sourceCustomerJson",
						"sourceCustomerJson foldDown(unroll(courses, courses),",
						"     mapColumn(",
						"          courses,",
						"          customerid,",
						"          customername,",
						"          registered,",
						"          mobile = details.mobile,",
						"          city = details.city",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenCourses",
						"flattenCourses sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          Registered as boolean,",
						"          Courses as string,",
						"          Mobile as string,",
						"          City as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID = customerid,",
						"          CustomerName = customername,",
						"          Registered = registered,",
						"          Courses = courses,",
						"          Mobile = mobile,",
						"          City = city",
						"     )) ~> sinkCustomerCourseTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_logdata_filter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_dl_gen2_parquet",
								"type": "DatasetReference"
							},
							"name": "sourceLogdataParquet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_synapse_logdata_parquet",
								"type": "DatasetReference"
							},
							"name": "sinkLogDataParquet"
						}
					],
					"transformations": [
						{
							"name": "filterNull"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sourceLogdataParquet",
						"sourceLogdataParquet filter(!(isNull({Resourcegroup}))) ~> filterNull",
						"filterNull sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Correlationid,",
						"          Operationname,",
						"          Status,",
						"          Eventcategory,",
						"          Level,",
						"          Time,",
						"          Subscription,",
						"          Eventinitiatedby,",
						"          Resourcetype,",
						"          Resourcegroup,",
						"          Resource",
						"     )) ~> sinkLogDataParquet"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_parquet_to_json')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_dl_gen2_parquet",
								"type": "DatasetReference"
							},
							"name": "sourceParquet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dl_logdataJson",
								"type": "DatasetReference"
							},
							"name": "sinkJsonFile"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sourceParquet",
						"sourceParquet sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['log.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkJsonFile"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_split_weblogs')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_dl_nginx",
								"type": "DatasetReference"
							},
							"name": "sourceNginxLogs"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_synapse_Serverlogs",
								"type": "DatasetReference"
							},
							"name": "sinkServerlogs"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedTimeColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceNginxLogs",
						"sourceNginxLogs select(mapColumn(",
						"          Remote_addr = Column_1,",
						"          Time_local = Column_4,",
						"          Request = Column_6,",
						"          Status = Column_7,",
						"          Bytes = Column_8",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(Time_local = replace(replace(Time_local, '[',''), ']','')) ~> derivedTimeColumn",
						"derivedTimeColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Remote_addr as string,",
						"          Time_local as string,",
						"          Request as string,",
						"          Status as integer,",
						"          Bytes as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Remote_addr,",
						"          Time_local,",
						"          Request,",
						"          Status,",
						"          Bytes",
						"     )) ~> sinkServerlogs"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_DimCustomer_Cache_SK')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_DimCustomer_Cache_SK",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_DimCustomer_Cache_SK",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCustomer": {},
									"getMaxID": {},
									"sinkDimCustomer": {},
									"sinkMaxID": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_storagegen2kr",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-25T15:42:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_DimProd_surogatekey')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_DimProduct_SurrogateKey",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_DimProduct_SurrogateKey",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceProduct": {},
									"sourceProductModel": {},
									"sourceProductCategory": {},
									"sinkDimProduct": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_storagegen2kr",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-26T02:59:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_DimProduct_SurrogateKey')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_FactSales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlow_FactSales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Factsales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceSalesOrderDetail": {},
									"sourceSalesOrderHeader": {},
									"sinkFactSales": {
										"TableName": {
											"value": "@pipeline().parameters.TargetTable",
											"type": "Expression"
										},
										"SchemaName": {
											"value": "@pipeline().parameters.TargetSchema",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_storagegen2kr",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TargetSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"TargetTable": {
						"type": "string",
						"defaultValue": "FactSales"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-25T11:33:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Factsales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_FactSales_drived_col')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlow_FactSales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Factsales_drived_col",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceSalesOrderDetail": {},
									"sourceSalesOrderHeader": {},
									"sinkFactSales": {
										"TableName": {
											"value": "@pipeline().parameters.TargetTable",
											"type": "Expression"
										},
										"SchemaName": {
											"value": "@pipeline().parameters.TargetSchema",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_storagegen2kr",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TargetSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"TargetTable": {
						"type": "string",
						"defaultValue": "FactSales_derived_column"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-25T14:18:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Factsales_drived_col')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_conditional_split')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_conditional_split",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_conditional_split",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceLogdata": {},
									"sinkLogdata": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_storagegen2kr",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-26T08:09:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_conditional_split')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_dim_cust_product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_DimCustomerAndProduct",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_DimCustomerAndProduct",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCustomer": {
										"SchemaName": {
											"value": "@pipeline().parameters.SourceSchema",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.SourceCustomerTable",
											"type": "Expression"
										}
									},
									"sourceProduct": {
										"SchemaName": {
											"value": "@pipeline().parameters.SourceSchema",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.SourceProductTable",
											"type": "Expression"
										}
									},
									"sourceProductModel": {
										"SchemaName": {
											"value": "@pipeline().parameters.SourceSchema",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.SourceProductModelTable",
											"type": "Expression"
										}
									},
									"sourceProductCategory": {
										"SchemaName": {
											"value": "@pipeline().parameters.SourceSchema",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.SourceProductCategoryTable",
											"type": "Expression"
										}
									},
									"sinkDimCustomer": {
										"TableName": {
											"value": "@pipeline().parameters.TargetDimCustomer",
											"type": "Expression"
										},
										"SchemaName": {
											"value": "@pipeline().parameters.TargetSchema",
											"type": "Expression"
										}
									},
									"sinkDimProduct": {
										"TableName": {
											"value": "@pipeline().parameters.TargetDimProduct",
											"type": "Expression"
										},
										"SchemaName": {
											"value": "@pipeline().parameters.TargetSchema",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_storagegen2kr",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SourceSchema": {
						"type": "string",
						"defaultValue": "SalesLT"
					},
					"SourceCustomerTable": {
						"type": "string",
						"defaultValue": "Customer"
					},
					"SourceProductTable": {
						"type": "string",
						"defaultValue": "Product"
					},
					"SourceProductModelTable": {
						"type": "string",
						"defaultValue": "ProductModel"
					},
					"SourceProductCategoryTable": {
						"type": "string",
						"defaultValue": "ProductCategory"
					},
					"TargetSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"TargetDimCustomer": {
						"type": "string",
						"defaultValue": "DimCustomer"
					},
					"TargetDimProduct": {
						"type": "string",
						"defaultValue": "DimProduct"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-25T13:11:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_dim_cust_product_v1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_DimCustomerAndProduct_v1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_DimCustomerAndProduct_v1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCustomer": {},
									"sourceProduct": {},
									"sourceProductModel": {},
									"sourceProductCategory": {},
									"sinkDimCustomer": {},
									"sinkDimProduct": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_storagegen2kr",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-25T13:53:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_dimproduct')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_DimProduct_dedup_v1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_DimProduct_dedup_v1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceProduct": {},
									"sourceProductModel": {},
									"sourceProductCategory": {},
									"LatestProducts": {},
									"sinkDimProduct": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_storagegen2kr",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-26T03:12:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_DimProduct_dedup_v1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_json_array_process')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_json_array_process",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_json_array_process",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCustomerJson": {},
									"sinkCustomerCourseTable": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_storagegen2kr",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-26T05:38:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_json_array_process')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_logdata_filter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_logdata_filter",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_logdata_filter",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceLogdataParquet": {},
									"sinkLogDataParquet": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "ls_storagegen2kr",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-26T03:57:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_logdata_filter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_parquet_to_json')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_parquet_to_json",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_parquet_to_json",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceParquet": {},
									"sinkJsonFile": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy_json_to_table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_parquet_to_json",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_dl_Json_by_df",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_synapse_logdata_parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-26T05:24:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_parquet_to_json')]"
			]
		}
	]
}